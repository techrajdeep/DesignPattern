
============================

1. Logarithm (Complexity Analysis)
2. Graph Traversals (BFS & DFS)
3. Binary Search
4. Sliding Window
5. Recursion
6. 2 Algorithms (Inverting a binary tree & Reverse a Linked List)
7. Suffix Trees
8. Heaps
9. DP
10. Sorting Algorithms (Quick & Merge)
=======================
Different types of design patterns
1. Creational design patterns
     1.a: Singleton
     1.b: Factory
          i) abstract factory
          ii) factory method
     1.c: Builder
     1.d prototype
2. Structural Design pattern
     2.a: Adapter
     2.b:Decorator
     2.c:Proxy
       d.  facade
        e. flyweight
        f. composite
        g. Bridge
3. Behavioural Design pattern
     3.a:Strategy
     3.b:Observer
     3.c:Iterator
        d.state
        e.visitor
        f.Interpretor
        g. command
        h. chain of responsibility
        i. Mediator
        j.Memento
        k. null object
        .template method
 1.a.Singleton
  A class has only one instance and provides global access to this instance.
  //recommended not to use the singleton

  class Singleton
  {
    private static Singleton instance=null;

    private Singleton(){};

    public static Singleton getInstance ()
    {
        if (null!=instance)
        {
           synchronized(Singleton.class)
           {
           if(instance==null)
             {
              instance= new Singleton();
             }

           }
        }

        return instance;
    }

  }


 =========
 3.a: Strategy Design pattern

 Algorithm vary independently from the client that uses it

 ------
 interface Strategy {
   public int calculate(int a, int b);
 }

 public class AddOperation implements Strategy{
   public int calculate(int a , int b)
   {
       return a+b;
   }
 }

 public class Subtract implements Strategy{
   public int calculate(int a , int b)
   {
       return a-b;
   }
 }

  public class Multiply implements Strategy{
   public int calculate(int a , int b)
   {
       return a*b;
   }
  }
   public class Division implements Strategy{
   public int calculate(int a , int b)
   {
       return a/b;
   }
  }


 class Context {

 private Strategy strategy;


 public Context (Strategy strategy)
   {
      this.strategy=strategy;

   }

 public int executeStrategy(int a, int b)
   {
    return strategy.calculate(a, b);

    }
 }


 public class StrategyxExcutor{

    public static void main (String args{})
    {
        Context ctx= new Context(new AddOperation());
           ctx.executeStrategy(1,2);


        ctx= new Context(new Subtract());
          ctx.executeStrategy(3,4);

        ctx= new Context(new Multiply());
            ctx.executeStrategy(4,5);

    }
 }


 =========Adapter=========

 // Java implementation of Adapter pattern

interface Bird
{
	// birds implement Bird interface that allows
	// them to fly and make sounds adaptee interface
	public void fly();
	public void makeSound();
}

class Sparrow implements Bird
{
	// a concrete implementation of bird
	public void fly()
	{
		System.out.println("Flying");
	}
	public void makeSound()
	{
		System.out.println("Chirp Chirp");
	}
}

interface ToyDuck
{
	// target interface
	// toyducks dont fly they just make
	// squeaking sound
	public void squeak();
}

class PlasticToyDuck implements ToyDuck
{
	public void squeak()
	{
		System.out.println("Squeak");
	}
}

class BirdAdapter implements ToyDuck
{
	// You need to implement the interface your
	// client expects to use.
	Bird bird;
	public BirdAdapter(Bird bird)
	{
		// we need reference to the object we
		// are adapting
		this.bird = bird;
	}

	public void squeak()
	{
		// translate the methods appropriately
		bird.makeSound();
	}
}

class Main
{
	public static void main(String args[])
	{
		Sparrow sparrow = new Sparrow();
		ToyDuck toyDuck = new PlasticToyDuck();

		// Wrap a bird in a birdAdapter so that it
		// behaves like toy duck
		ToyDuck birdAdapter = new BirdAdapter(sparrow);

		System.out.println("Sparrow...");
		sparrow.fly();
		sparrow.makeSound();

		System.out.println("ToyDuck...");
		toyDuck.squeak();

		// toy duck behaving like a bird
		System.out.println("BirdAdapter...");
		birdAdapter.squeak();
	}
}
================


